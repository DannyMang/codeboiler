================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-29T03:14:13.943Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
components/
  GitHubLoginButton.tsx
  ProjectForm.tsx
pages/
  api/
    auth/
      [...nextauth].ts
    exportToGithub.ts
    generateProject.ts
    oauth.ts
  _app.tsx
  _document.tsx
  index.tsx
  login.tsx
public/
  basic-react-template/
    pages/
      _app.tsx
      _document.tsx
    styles/
      globals.css
    .eslintrc.json
    next-env.d.ts
    next.config.mjs
    postcss.config.mjs
    tsconfig.json
styles/
  globals.css
utils/
  github.ts
.eslintrc.json
.gitignore
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: components/GitHubLoginButton.tsx
================
import React from 'react';
import { signIn, signOut, useSession } from 'next-auth/react';
import { Github } from 'lucide-react';

interface GitHubLoginButtonProps {
  onClick?: () => void;
}

const GitHubLoginButton: React.FC<GitHubLoginButtonProps> = ({ onClick }) => {
  const { data: session } = useSession();

  const handleClick = () => {
    if (onClick) {
      onClick();
    } else {
      signIn('github');
    }
  };

  if (session) {
    return (
      <button
        onClick={() => signOut()}
        className="flex items-center justify-center gap-2 px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700 transition-colors"
      >
        Sign out
      </button>
    );
  }

  return (
    <button
      onClick={handleClick}
      className="flex items-center justify-center gap-2 px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700 transition-colors"
    >
      <Github size={20} />
      Sign in with GitHub
    </button>
  );
};

export default GitHubLoginButton;

================
File: components/ProjectForm.tsx
================
import React, { useState } from 'react';
import { Send } from 'lucide-react';
import { useSession } from 'next-auth/react';

interface Message {
  text: string;
  sender: 'user' | 'ai';
}

interface ProjectData {
  name: string;
  files: { dir: string; content: string }[];
}

const ProjectForm: React.FC = () => {
  const { data: session } = useSession();
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [prompt, setPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [projectData, setProjectData] = useState<ProjectData | null>(null);
  const [repoUrl, setRepoUrl] = useState('');

  const handleSendMessage = () => {
    if (input.trim()) {
      setMessages(prevMessages => [...prevMessages, { text: input, sender: 'user' }]);
      setInput('');
      // Simulate AI response (replace with actual API call)
      setTimeout(() => {
        setMessages(prevMessages => [...prevMessages, { text: "This is a simulated AI response.", sender: 'ai' }]);
      }, 1000);
    }
  };

  const handleGenerateProject = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/generateProject', {
        method: 'POST',
        body: JSON.stringify({ prompt }),
        headers: { 'Content-Type': 'application/json' }
      });
      const data = await response.json();
      setProjectData(data);
    } catch (error) {
      console.error('Error generating project:', error);
    }
    setIsLoading(false);
  };

  const handleExportToGithub = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/exportToGithub', {
        method: 'POST',
        body: JSON.stringify({ projectData }),
        headers: { 'Content-Type': 'application/json' }
      });
      const { repoUrl } = await response.json();
      setRepoUrl(repoUrl);
    } catch (error) {
      console.error('Error exporting to GitHub:', error);
    }
    setIsLoading(false);
  };

  return (
    <div className="flex flex-col h-screen bg-gray-900 text-gray-300">
      <header className="p-4 border-b border-gray-700">
        <h1 className="text-xl font-semibold">Project Generator</h1>
        {session && <p>Signed in as {session.user?.name}</p>}
      </header>
      
      <div className="flex-grow overflow-y-auto p-4 space-y-4">
        {messages.map((message, index) => (
          <div key={index} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`max-w-xs md:max-w-md lg:max-w-lg xl:max-w-xl rounded-lg p-3 ${
              message.sender === 'user' ? 'bg-blue-600' : 'bg-gray-700'
            }`}>
              {message.text}
            </div>
          </div>
        ))}
      </div>

      <div className="p-4 border-t border-gray-700">
        <div className="flex items-center bg-gray-800 rounded-lg">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Message ChatGPT..."
            className="flex-grow p-3 bg-transparent outline-none"
          />
          <button onClick={handleSendMessage} className="p-3 text-gray-400 hover:text-white">
            <Send size={20} />
          </button>
        </div>
        <input
          type="text"
          placeholder="Describe your project..."
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          className="mt-4 p-2 w-full bg-gray-800 rounded-md"
        />
        <button
          onClick={handleGenerateProject}
          disabled={isLoading || !prompt}
          className="mt-4 p-2 bg-blue-600 rounded-md disabled:bg-blue-400"
        >
          {isLoading ? 'Generating...' : 'Generate Project'}
        </button>
        {projectData && (
          <button
            onClick={handleExportToGithub}
            className="mt-4 ml-4 p-2 bg-green-600 rounded-md"
          >
            Export to GitHub
          </button>
        )}
        {repoUrl && (
          <div className="mt-4">
            <a href={repoUrl} target="_blank" rel="noopener noreferrer" className="text-blue-400 hover:underline">
              View created repository
            </a>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProjectForm;

================
File: pages/api/auth/[...nextauth].ts
================
// pages/api/auth/[...nextauth].ts

import NextAuth from 'next-auth';
import GithubProvider from 'next-auth/providers/github';

if (!process.env.GITHUB_CLIENT_ID || !process.env.GITHUB_CLIENT_SECRET) {
  throw new Error('Missing GitHub OAuth credentials');
}

export default NextAuth({
  providers: [
    GithubProvider({
      clientId: process.env.GITHUB_CLIENT_ID,
      clientSecret: process.env.GITHUB_CLIENT_SECRET,
    }),
  ],
});

================
File: pages/api/exportToGithub.ts
================
// pages/api/exportToGithub.ts

import { NextApiRequest, NextApiResponse } from 'next';
import { getSession } from 'next-auth/react';
import { createGithubRepo } from '../../utils/github';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getSession({ req });
  if (!session) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const { projectData, accessToken } = req.body;

  if (!accessToken) {
    return res.status(401).json({ error: 'GitHub access token is required' });
  }

  try {
    // Call the GitHub API to create a repository and upload files
    const repoUrl = await createGithubRepo(accessToken, projectData);
    res.status(200).json({ repoUrl });
  } catch (error) {
    console.error('Error creating GitHub repository:', error);
    res.status(500).json({ error: 'Failed to create GitHub repository' });
  }
}

================
File: pages/api/generateProject.ts
================
// pages/api/generateProject.ts

import fs from 'fs';
import path from 'path';
import type { NextApiRequest, NextApiResponse } from 'next';
import { getSession } from 'next-auth/react';

interface FileData {
  dir: string;
  content: string;
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getSession({ req });
  if (!session) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const { prompt } = req.body;

  // Call AI API to generate files
  const aiResponse = await fetch('https://api.anthropic.com/v1/complete', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-API-Key': process.env.CLAUDE_API_KEY || ''
    },
    body: JSON.stringify({
      prompt: `Generate code for a React project based on: ${prompt}. 
      You can modify "package.json" to include any necessary dependencies and "index.ts" for the main entry point. 
      Return a JSON response like this: [ { "dir": "src/components/ComponentName.js", "content": "import React...component code" }, { "dir": "package.json", "content": "updated package.json" } ]`,
      model: 'claude-v1',
      max_tokens_to_sample: 1000
    })
  });
  const generatedFiles: FileData[] = await aiResponse.json();

  // Read base template files
  const basePath = path.join(process.cwd(), 'public/basic-react-template');
  const baseFiles = await readDirectoryFiles(basePath);

  // Combine base files with AI-generated files (overwriting base with generated if applicable)
  const finalFiles = combineFiles(baseFiles, generatedFiles);

  res.status(200).json(finalFiles);
}

// Helper functions (readDirectoryFiles and combineFiles) remain the same

async function readDirectoryFiles(dirPath: string): Promise<FileData[]> {
  const files: FileData[] = [];
  const filesInDir = fs.readdirSync(dirPath);

  for (const file of filesInDir) {
    const filePath = path.join(dirPath, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      files.push(...await readDirectoryFiles(filePath));  // Recursively get files from subdirectories
    } else {
      const content = fs.readFileSync(filePath, 'utf8');
      files.push({
        dir: filePath.replace(process.cwd() + '/public/basic-react-template/', ''),
        content
      });
    }
  }

  return files;
}

// Helper to combine base files with AI-generated files
function combineFiles(baseFiles: FileData[], generatedFiles: FileData[]): FileData[] {
  const finalFiles = [...baseFiles];
  
  for (const generatedFile of generatedFiles) {
    const existingFileIndex = finalFiles.findIndex(file => file.dir === generatedFile.dir);
    
    if (existingFileIndex !== -1) {
      // Replace the base file with the AI-generated file if it already exists
      finalFiles[existingFileIndex] = generatedFile;
    } else {
      // Otherwise, just add the new AI-generated file
      finalFiles.push(generatedFile);
    }
  }
  
  return finalFiles;
}

================
File: pages/api/oauth.ts
================
import { NextApiRequest, NextApiResponse } from 'next';

const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID;
const GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET;

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    const githubAuthUrl = `https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&scope=repo`;
    res.redirect(githubAuthUrl);
  } else if (req.method === 'POST') {
    const { code } = req.body;

    const response = await fetch('https://github.com/login/oauth/access_token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        client_id: GITHUB_CLIENT_ID,
        client_secret: GITHUB_CLIENT_SECRET,
        code,
      }),
    });

    const data = await response.json();
    res.status(200).json({ access_token: data.access_token });
  } else {
    res.status(405).end();
  }
}

================
File: pages/_app.tsx
================
import "@/styles/globals.css";
import { SessionProvider } from 'next-auth/react';
import type { AppProps } from 'next/app';

function MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  );
}

export default MyApp;

================
File: pages/_document.tsx
================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

================
File: pages/index.tsx
================
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import ProjectForm from "../components/ProjectForm";

export default function Home() {
  const { data: session, status } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    }
  }, [status, router]);

  if (status === 'loading') {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-900 text-gray-300">
        <p className="text-xl">Loading...</p>
      </div>
    );
  }

  if (!session) {
    return null;
  }

  return <ProjectForm />;
}

================
File: pages/login.tsx
================
import React from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import GitHubLoginButton from '../components/GitHubLoginButton';

const LoginPage: React.FC = () => {
  const { data: session, status } = useSession();
  const router = useRouter();

  if (status === 'loading') {
    return <div>Loading...</div>;
  }

  if (session) {
    router.push('/');
    return null;
  }

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-900 text-gray-300">
      <h1 className="text-3xl font-bold mb-8">Welcome to Project Generator</h1>
      <p className="mb-8">Please sign in with GitHub to continue</p>
      <GitHubLoginButton />
    </div>
  );
};

export default LoginPage;

================
File: public/basic-react-template/pages/_app.tsx
================
import "@/styles/globals.css";
import type { AppProps } from "next/app";

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}

================
File: public/basic-react-template/pages/_document.tsx
================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

================
File: public/basic-react-template/styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: public/basic-react-template/.eslintrc.json
================
{
    "extends": ["next/core-web-vitals", "next/typescript"]
  }

================
File: public/basic-react-template/next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/building-your-application/configuring/typescript for more information.

================
File: public/basic-react-template/next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: true,
  };
  
  export default nextConfig;

================
File: public/basic-react-template/postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
    plugins: {
      tailwindcss: {},
    },
  };
  
  export default config;

================
File: public/basic-react-template/tsconfig.json
================
{
    "compilerOptions": {
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "preserve",
      "incremental": true,
      "paths": {
        "@/*": ["./*"]
      }
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
    "exclude": ["node_modules"]
  }

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: utils/github.ts
================
import fetch from 'node-fetch';

interface ProjectFile {
  dir: string; // File path (e.g., 'src/index.ts')
  content: string; // File content
}

interface ProjectData {
  name: string; // Repository name
  files: ProjectFile[]; // Array of files to be uploaded
}

const GITHUB_API_BASE = 'https://api.github.com';

export async function createGithubRepo(accessToken: string, projectData: ProjectData): Promise<string> {
  // Step 1: Create a new GitHub repository
  const repoResponse = await fetch(`${GITHUB_API_BASE}/user/repos`, {
    method: 'POST',
    headers: {
      Authorization: `token ${accessToken}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name: projectData.name,
      private: false, // Set to 'true' if you want private repos
      auto_init: false, // We'll upload our own files
    }),
  });

  const repoJson = await repoResponse.json();
  if (!repoResponse.ok) {
    throw new Error(`GitHub API error: ${repoJson.message}`);
  }

  const repoUrl = repoJson.html_url;
  const repoName = repoJson.full_name;

  // Step 2: Upload files to the newly created repository
  for (const file of projectData.files) {
    await uploadFileToGithubRepo(accessToken, repoName, file.dir, file.content);
  }

  // Step 3: Return the repository URL
  return repoUrl;
}

async function uploadFileToGithubRepo(
  accessToken: string,
  repoName: string,
  filePath: string,
  fileContent: string
) {
  const contentBase64 = Buffer.from(fileContent).toString('base64');
  const response = await fetch(`${GITHUB_API_BASE}/repos/${repoName}/contents/${filePath}`, {
    method: 'PUT',
    headers: {
      Authorization: `token ${accessToken}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: `Add ${filePath}`,
      content: contentBase64,
    }),
  });

  if (!response.ok) {
    const errorJson = await response.json();
    throw new Error(`GitHub upload error for ${filePath}: ${errorJson.message}`);
  }
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
/next-env.d.ts
.env

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  env: {
    GITHUB_CLIENT_ID: process.env.GITHUB_CLIENT_ID,
    GITHUB_CLIENT_SECRET: process.env.GITHUB_CLIENT_SECRET,
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "codeboiler",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.27.3",
    "dotenv": "^16.4.5",
    "lucide-react": "^0.446.0",
    "next": "^14.2.13",
    "next-auth": "^4.24.8",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/dotenv": "^6.1.1",
    "@types/node": "^20.16.10",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.13",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.2"
  },
  "description": "This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).",
  "main": "index.js",
  "keywords": [],
  "author": "",
  "license": "ISC"
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "target": "es2022",  // Updated from es2020
    "module": "esnext",  
    "strict": true,
    "esModuleInterop": true,
    "outDir": "./dist",
    "allowJs": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "moduleResolution": "node",  // Added this line
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "components/GitHubLoginButton.js", "components/ProjectForm.js", "components/ProjectForm.js"],
  "exclude": ["node_modules"]
}
